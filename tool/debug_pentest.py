#!/usr/bin/env python3

import unittest
from debug_core import *
import time
import requests
import json
import multiprocessing

errcodes = Errors()
debug = 'silent'
class MalfromedJSONTest(unittest.TestCase):

    def test_add_spending_malformed(self):
        '''
        send some malformed JSON
        '''
        date = int(time.time()) - 3600
        request_params = """{
            "amount": 1,
            "currency": 'USD',
            "reason": "reason",
            "date": %s,
            "date": %s
        }""" % (date, date)
        resp = requests.post(route_url('addspending'), data=request_params)
        data = resp.content.decode()
        errcode = json.loads(data).get('error')
        self.assertEqual(errcode, errcodes.MALFORMED)

    def test_update_spending_malformed(self):
        '''
        send some malformed JSON
        '''
        date = int(time.time()) - 3600
        request_params = """{
            "id": 1,
            "amount": 1,
            "currency": USD,
            "reason": "reason",
            "date": %s,
        }""" % date
        resp = requests.post(route_url('updatespending'), data=request_params)
        data = resp.content.decode()
        errcode = json.loads(data).get('error')
        self.assertEqual(errcode, errcodes.MALFORMED)

    def test_delete_spending_malformed(self):
        '''
        send some malformed JSON
        '''
        date = int(time.time()) - 3600
        request_params = """{
            "id": 01,
        }"""
        resp = requests.post(route_url('deletespending'), data=request_params)
        data = resp.content.decode()
        errcode = json.loads(data).get('error')
        self.assertEqual(errcode, errcodes.MALFORMED)

class InvalidSchemaJSONTest(unittest.TestCase):

    def test_add_spending_invalid(self):
        '''
        send some JSON with schema validation error
        '''
        date = int(time.time()) - 3600
        payload = add_spending_command(amount=-1, currency='USDAAA', reason='whatever', date=date, debug=debug)
        errcode = payload.get('error')
        self.assertEqual(errcode, errcodes.MALFORMED)

    def test_malformed_update_spending_invalid(self):
        '''
        send some JSON with schema validation error
        '''
        date = int(time.time()) - 3600
        payload = update_spending_command(id=1, amount=-1, currency='USD', reason='whatever', date=date, debug=debug)
        errcode = payload.get('error')
        self.assertEqual(errcode, errcodes.MALFORMED)

    def test_malformed_delete_spending_invalid(self):
        '''
        send some JSON with schema validation error
        '''
        payload = delete_spending_command(id='a', debug='silent')
        errcode = payload.get('error')
        self.assertEqual(errcode, errcodes.MALFORMED)

class InvalidDataJSONTest(unittest.TestCase):

    def test_add_spending_dataerr(self):
        '''
        send some JSON with data error
        '''
        date = int(time.time()) - 3600
        payload = add_spending_command(amount=1, currency='XYZ', reason='whatever', date=date, debug=debug) # pick non-existing currency
        errcode = payload.get('error')
        self.assertEqual(errcode, errcodes.DATA_ERROR)

    def test_malformed_update_spending_dataerr(self):
        '''
        send some JSON with data error
        '''
        date = int(time.time()) + 3600 # generate invalid date (future spending)
        payload = update_spending_command(id=1, amount=1, currency='USD', reason='whatever', date=date, debug=debug)
        errcode = payload.get('error')
        self.assertEqual(errcode, errcodes.DATA_ERROR)

class DbErrorJSONTest(unittest.TestCase):

    def test_malformed_update_spending_dberr(self):
        '''
        send some update JSON with non-existing ID
        '''
        date = int(time.time()) - 3600
        payload = update_spending_command(id=10000, amount=1, currency='USD', reason='whatever', date=date, debug=debug)
        errcode = payload.get('error')
        self.assertEqual(errcode, errcodes.DB_ERROR)

    def test_malformed_delete_spending_invalid(self):
        '''
        send some delete JSON with non-existing ID
        '''
        payload = delete_spending_command(id=10000, debug='silent')
        errcode = payload.get('error')
        self.assertEqual(errcode, errcodes.DB_ERROR)

class RaceConditionTest(unittest.TestCase):

    def test_race_condition(self):
        '''
        send 10Ã—10 concurrenct requests
        '''
        def worker(procnum, return_dict):
            '''worker function'''
            date = int(time.time()) - 3600
            payload = add_spending_command(amount=1, currency='USD', reason='whatever', date=date, debug=debug)
            return_dict[procnum] = payload

        manager = multiprocessing.Manager()
        jobs = []
        for i in range(10):
            return_dict = manager.dict()
            for i in range(10):
                p = multiprocessing.Process(target=worker, args=(i, return_dict))
                jobs.append(p)
                p.start()

            for proc in jobs:
                proc.join()
            for d in return_dict.values():
                self.assertEqual(1, d.get('ok'))



if __name__ == '__main__':
    unittest.main()